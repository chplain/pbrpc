// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocol/protocol.proto

/*
	Package protocol is a generated protocol buffer package.

	It is generated from these files:
		protocol/protocol.proto

	It has these top-level messages:
		Handshake
		RequestHeader
		ResponseHeader
		Heartbeat
*/
package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MessageType int32

const (
	MESSAGE_REQUEST   MessageType = 0
	MESSAGE_RESPONSE  MessageType = 1
	MESSAGE_HEARTBEAT MessageType = 2
)

var MessageType_name = map[int32]string{
	0: "MESSAGE_REQUEST",
	1: "MESSAGE_RESPONSE",
	2: "MESSAGE_HEARTBEAT",
}
var MessageType_value = map[string]int32{
	"MESSAGE_REQUEST":   0,
	"MESSAGE_RESPONSE":  1,
	"MESSAGE_HEARTBEAT": 2,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{0} }

type ErrorCode int32

const (
	ERROR_NO              ErrorCode = 0
	ERROR_CHANNEL_BUSY    ErrorCode = 1
	ERROR_NOT_IMPLEMENTED ErrorCode = 2
	ERROR_BAD_REQUEST     ErrorCode = 3
	ERROR_INTERNAL_SERVER ErrorCode = 4
	ERROR_USER_DEFINED    ErrorCode = 256
)

var ErrorCode_name = map[int32]string{
	0:   "ERROR_NO",
	1:   "ERROR_CHANNEL_BUSY",
	2:   "ERROR_NOT_IMPLEMENTED",
	3:   "ERROR_BAD_REQUEST",
	4:   "ERROR_INTERNAL_SERVER",
	256: "ERROR_USER_DEFINED",
}
var ErrorCode_value = map[string]int32{
	"ERROR_NO":              0,
	"ERROR_CHANNEL_BUSY":    1,
	"ERROR_NOT_IMPLEMENTED": 2,
	"ERROR_BAD_REQUEST":     3,
	"ERROR_INTERNAL_SERVER": 4,
	"ERROR_USER_DEFINED":    256,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}
func (ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{1} }

type Handshake struct {
	Id                 []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Timeout            int32  `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	IncomingWindowSize int32  `protobuf:"varint,3,opt,name=incoming_window_size,json=incomingWindowSize,proto3" json:"incoming_window_size,omitempty"`
	OutgoingWindowSize int32  `protobuf:"varint,4,opt,name=outgoing_window_size,json=outgoingWindowSize,proto3" json:"outgoing_window_size,omitempty"`
}

func (m *Handshake) Reset()                    { *m = Handshake{} }
func (m *Handshake) String() string            { return proto.CompactTextString(m) }
func (*Handshake) ProtoMessage()               {}
func (*Handshake) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{0} }

func (m *Handshake) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Handshake) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *Handshake) GetIncomingWindowSize() int32 {
	if m != nil {
		return m.IncomingWindowSize
	}
	return 0
}

func (m *Handshake) GetOutgoingWindowSize() int32 {
	if m != nil {
		return m.OutgoingWindowSize
	}
	return 0
}

type RequestHeader struct {
	SequenceNumber int32  `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	ServiceName    string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	MethodIndex    int32  `protobuf:"varint,3,opt,name=method_index,json=methodIndex,proto3" json:"method_index,omitempty"`
}

func (m *RequestHeader) Reset()                    { *m = RequestHeader{} }
func (m *RequestHeader) String() string            { return proto.CompactTextString(m) }
func (*RequestHeader) ProtoMessage()               {}
func (*RequestHeader) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{1} }

func (m *RequestHeader) GetSequenceNumber() int32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *RequestHeader) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *RequestHeader) GetMethodIndex() int32 {
	if m != nil {
		return m.MethodIndex
	}
	return 0
}

type ResponseHeader struct {
	SequenceNumber int32 `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	ErrorCode      int32 `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ResponseHeader) Reset()                    { *m = ResponseHeader{} }
func (m *ResponseHeader) String() string            { return proto.CompactTextString(m) }
func (*ResponseHeader) ProtoMessage()               {}
func (*ResponseHeader) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{2} }

func (m *ResponseHeader) GetSequenceNumber() int32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *ResponseHeader) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type Heartbeat struct {
}

func (m *Heartbeat) Reset()                    { *m = Heartbeat{} }
func (m *Heartbeat) String() string            { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()               {}
func (*Heartbeat) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{3} }

func init() {
	proto.RegisterType((*Handshake)(nil), "Handshake")
	proto.RegisterType((*RequestHeader)(nil), "RequestHeader")
	proto.RegisterType((*ResponseHeader)(nil), "ResponseHeader")
	proto.RegisterType((*Heartbeat)(nil), "Heartbeat")
	proto.RegisterEnum("MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("ErrorCode", ErrorCode_name, ErrorCode_value)
}
func (m *Handshake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Handshake) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Timeout != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Timeout))
	}
	if m.IncomingWindowSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.IncomingWindowSize))
	}
	if m.OutgoingWindowSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.OutgoingWindowSize))
	}
	return i, nil
}

func (m *RequestHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SequenceNumber != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.SequenceNumber))
	}
	if len(m.ServiceName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.ServiceName)))
		i += copy(dAtA[i:], m.ServiceName)
	}
	if m.MethodIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.MethodIndex))
	}
	return i, nil
}

func (m *ResponseHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SequenceNumber != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.SequenceNumber))
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *Heartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Heartbeat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintProtocol(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Handshake) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovProtocol(uint64(m.Timeout))
	}
	if m.IncomingWindowSize != 0 {
		n += 1 + sovProtocol(uint64(m.IncomingWindowSize))
	}
	if m.OutgoingWindowSize != 0 {
		n += 1 + sovProtocol(uint64(m.OutgoingWindowSize))
	}
	return n
}

func (m *RequestHeader) Size() (n int) {
	var l int
	_ = l
	if m.SequenceNumber != 0 {
		n += 1 + sovProtocol(uint64(m.SequenceNumber))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.MethodIndex != 0 {
		n += 1 + sovProtocol(uint64(m.MethodIndex))
	}
	return n
}

func (m *ResponseHeader) Size() (n int) {
	var l int
	_ = l
	if m.SequenceNumber != 0 {
		n += 1 + sovProtocol(uint64(m.SequenceNumber))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovProtocol(uint64(m.ErrorCode))
	}
	return n
}

func (m *Heartbeat) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovProtocol(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProtocol(x uint64) (n int) {
	return sovProtocol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Handshake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Handshake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Handshake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncomingWindowSize", wireType)
			}
			m.IncomingWindowSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IncomingWindowSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingWindowSize", wireType)
			}
			m.OutgoingWindowSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutgoingWindowSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodIndex", wireType)
			}
			m.MethodIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MethodIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Heartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Heartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Heartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtocol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProtocol
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProtocol
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProtocol(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProtocol = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtocol   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("protocol/protocol.proto", fileDescriptorProtocol) }

var fileDescriptorProtocol = []byte{
	// 501 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0x63, 0xb7, 0x05, 0x72, 0x53, 0x52, 0x33, 0xb4, 0x34, 0x20, 0x11, 0x95, 0x6c, 0xa8,
	0x2a, 0xa5, 0x45, 0x62, 0xc3, 0xd6, 0x69, 0x06, 0x12, 0x29, 0x71, 0xca, 0xd8, 0xe1, 0x6f, 0x33,
	0xf2, 0xcf, 0xc5, 0x19, 0x51, 0x7b, 0x82, 0x7f, 0x28, 0x64, 0x81, 0x78, 0x04, 0x76, 0x88, 0x37,
	0x62, 0xd9, 0x47, 0x80, 0xf0, 0x22, 0xc8, 0xe3, 0xb8, 0x41, 0xec, 0xd8, 0xdd, 0xfb, 0x9d, 0x73,
	0x34, 0x47, 0xa3, 0x0b, 0xfb, 0xf3, 0x44, 0x66, 0xd2, 0x97, 0xe7, 0x27, 0xd5, 0x70, 0xac, 0x86,
	0x7b, 0xdd, 0x50, 0x64, 0xb3, 0xdc, 0x3b, 0xf6, 0x65, 0x74, 0x12, 0xca, 0x50, 0x96, 0xba, 0x97,
	0xbf, 0x55, 0x9b, 0x5a, 0xd4, 0x54, 0xda, 0x3b, 0xdf, 0x35, 0xa8, 0x0f, 0xdc, 0x38, 0x48, 0x67,
	0xee, 0x3b, 0x24, 0x4d, 0xd0, 0x45, 0xd0, 0xd2, 0x0e, 0xb4, 0xc3, 0x6d, 0xa6, 0x8b, 0x80, 0xb4,
	0xe0, 0x7a, 0x26, 0x22, 0x94, 0x79, 0xd6, 0xd2, 0x0f, 0xb4, 0xc3, 0x2d, 0x56, 0xad, 0xe4, 0x11,
	0xec, 0x8a, 0xd8, 0x97, 0x91, 0x88, 0x43, 0x7e, 0x21, 0xe2, 0x40, 0x5e, 0xf0, 0x54, 0x2c, 0xb0,
	0xb5, 0xa1, 0x6c, 0xa4, 0xd2, 0x5e, 0x2a, 0xc9, 0x16, 0x0b, 0x2c, 0x12, 0x32, 0xcf, 0x42, 0xf9,
	0x6f, 0x62, 0xb3, 0x4c, 0x54, 0xda, 0x3a, 0xd1, 0xf9, 0x0c, 0x37, 0x19, 0xbe, 0xcf, 0x31, 0xcd,
	0x06, 0xe8, 0x06, 0x98, 0x90, 0x87, 0xb0, 0x93, 0x16, 0x20, 0xf6, 0x91, 0xc7, 0x79, 0xe4, 0x61,
	0xa2, 0xba, 0x6e, 0xb1, 0x66, 0x85, 0x2d, 0x45, 0xc9, 0x03, 0xd8, 0x4e, 0x31, 0xf9, 0x20, 0x0a,
	0x9f, 0x1b, 0xa1, 0x2a, 0x5f, 0x67, 0x8d, 0x15, 0xb3, 0xdc, 0x08, 0x0b, 0x4b, 0x84, 0xd9, 0x4c,
	0x06, 0x5c, 0xc4, 0x01, 0x7e, 0x5c, 0x15, 0x6f, 0x94, 0x6c, 0x58, 0xa0, 0xce, 0x2b, 0x68, 0x32,
	0x4c, 0xe7, 0x32, 0x4e, 0xf1, 0x7f, 0x0b, 0xdc, 0x07, 0xc0, 0x24, 0x91, 0x09, 0xf7, 0x65, 0x80,
	0xab, 0xbf, 0xab, 0x2b, 0x72, 0x2a, 0x03, 0xec, 0x34, 0xa0, 0x3e, 0x40, 0x37, 0xc9, 0x3c, 0x74,
	0xb3, 0xa3, 0x09, 0x34, 0xc6, 0x98, 0xa6, 0x6e, 0x88, 0xce, 0xa7, 0x39, 0x92, 0xdb, 0xb0, 0x33,
	0xa6, 0xb6, 0x6d, 0x3e, 0xa3, 0x9c, 0xd1, 0xe7, 0x53, 0x6a, 0x3b, 0x46, 0x8d, 0xec, 0x82, 0xb1,
	0x86, 0xf6, 0xd9, 0xc4, 0xb2, 0xa9, 0xa1, 0x91, 0x3d, 0xb8, 0x55, 0xd1, 0x01, 0x35, 0x99, 0xd3,
	0xa3, 0xa6, 0x63, 0xe8, 0x47, 0xdf, 0x34, 0xa8, 0xd3, 0xea, 0x2d, 0xb2, 0x0d, 0x37, 0x28, 0x63,
	0x13, 0xc6, 0xad, 0x89, 0x51, 0x23, 0x77, 0x80, 0x94, 0xdb, 0xe9, 0xc0, 0xb4, 0x2c, 0x3a, 0xe2,
	0xbd, 0xa9, 0xfd, 0xda, 0xd0, 0xc8, 0x5d, 0xd8, 0xab, 0x5c, 0x0e, 0x1f, 0x8e, 0xcf, 0x46, 0x74,
	0x4c, 0x2d, 0x87, 0xf6, 0x0d, 0xbd, 0x78, 0xa5, 0x94, 0x7a, 0x66, 0xff, 0xaa, 0xd2, 0xc6, 0x3a,
	0x31, 0xb4, 0x1c, 0xca, 0x2c, 0x73, 0xc4, 0x6d, 0xca, 0x5e, 0x50, 0x66, 0x6c, 0x92, 0xfd, 0xea,
	0x91, 0xa9, 0x4d, 0x19, 0xef, 0xd3, 0xa7, 0x43, 0x8b, 0xf6, 0x8d, 0x2f, 0x7a, 0xef, 0xc9, 0xe5,
	0xaf, 0x76, 0xed, 0xc7, 0xb2, 0xad, 0x5d, 0x2e, 0xdb, 0xda, 0xcf, 0x65, 0x5b, 0xfb, 0xfa, 0xbb,
	0x5d, 0x7b, 0xd3, 0xf9, 0xeb, 0x64, 0xcf, 0x31, 0xeb, 0x2e, 0xba, 0xc5, 0xd9, 0x7a, 0xc9, 0xdc,
	0xbf, 0x3a, 0x6e, 0xef, 0x9a, 0x9a, 0x1e, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x3f, 0xd4, 0xf6,
	0xe9, 0xf8, 0x02, 0x00, 0x00,
}
