/*
 * Code generated by protoc-gen-pbrpc. DO NOT EDIT.
 * source: services.proto
 */

package sample

import (
    "context"
    "reflect"

    pbrpc "github.com/let-z-go/pbrpc"
)

// ClientService ///////////////////////////////////////////////////////////////

const (
    ClientService_GetNickname = 0
)

type ClientServiceClient struct {
    Channel pbrpc.Channel
    Context context.Context
}

func (self ClientServiceClient) GetNickname(autoRetry bool) (*GetNicknameResponse, error) {
    responseType := methodTableOfClientService[ClientService_GetNickname].ResponseType
    response, e := self.Channel.CallMethod(self.Context, clientServiceName, ClientService_GetNickname, &pbrpc.Void{}, responseType, autoRetry)

    if e != nil {
        return nil, e
    }

    return response.(*GetNicknameResponse), e
}

type ClientServiceHandlerBase struct {}

func (ClientServiceHandlerBase) X_GetName() string { return clientServiceName }
func (ClientServiceHandlerBase) X_GetMethodTable() pbrpc.MethodTable { return methodTableOfClientService }
func (ClientServiceHandlerBase) X_InterceptMethodCall(int32, context.Context, pbrpc.Channel, pbrpc.IncomingMessage) (pbrpc.OutgoingMessage, pbrpc.ErrorCode) { return nil, 0 }

var _ = pbrpc.ServiceHandler(ClientServiceHandlerBase{})

// `ClientServiceHandler` template:
//
// type ClientServiceHandler struct {
//     ClientServiceHandlerBase
// }
//
// func (ClientServiceHandler) X_InterceptMethodCall(methodIndex int32, context_ context.Context, channel pbrpc.Channel, request pbrpc.IncomingMessage) (pbrpc.OutgoingMessage, pbrpc.ErrorCode)
// func (ClientServiceHandler) GetNickname(context_ context.Context, channel pbrpc.Channel) (*GetNicknameResponse, error)

const clientServiceName = "CLIENT"

var methodTableOfClientService = pbrpc.MethodTable{
    /* ClientService.GetNickname */ {
        reflect.TypeOf(pbrpc.Void{}),
        reflect.TypeOf(GetNicknameResponse{}),

        func(serviceHandler pbrpc.ServiceHandler, context_ context.Context, channel pbrpc.Channel, request pbrpc.IncomingMessage) (pbrpc.OutgoingMessage, pbrpc.ErrorCode) {
            {
                response, errorCode := serviceHandler.X_InterceptMethodCall(ClientService_GetNickname, context_, channel, request)

                if errorCode != 0 {
                    return nil, errorCode
                }

                if response != nil {
                    return response, 0
                }
            }

            methodHandler, ok := serviceHandler.(interface { GetNickname(context.Context, pbrpc.Channel) (*GetNicknameResponse, error) })

            if !ok {
                return nil, pbrpc.ErrorNotImplemented
            }

            response, e := methodHandler.GetNickname(context_, channel)

            if e != nil {
                if e, ok := e.(pbrpc.Error); ok && e.IsInitiative() {
                    return nil, e.GetCode()
                } else {
                    return nil, pbrpc.ErrorInternalServer
                }
            }

            return response, 0
        },
    },
}

// ServerService ///////////////////////////////////////////////////////////////

const (
    ServerService_SayHello = 0
)

type ServerServiceClient struct {
    Channel pbrpc.Channel
    Context context.Context
}

func (self ServerServiceClient) SayHello(request *SayHelloRequest, autoRetry bool) (*SayHelloResponse, error) {
    responseType := methodTableOfServerService[ServerService_SayHello].ResponseType
    response, e := self.Channel.CallMethod(self.Context, serverServiceName, ServerService_SayHello, request, responseType, autoRetry)

    if e != nil {
        return nil, e
    }

    return response.(*SayHelloResponse), e
}

type ServerServiceHandlerBase struct {}

func (ServerServiceHandlerBase) X_GetName() string { return serverServiceName }
func (ServerServiceHandlerBase) X_GetMethodTable() pbrpc.MethodTable { return methodTableOfServerService }
func (ServerServiceHandlerBase) X_InterceptMethodCall(int32, context.Context, pbrpc.Channel, pbrpc.IncomingMessage) (pbrpc.OutgoingMessage, pbrpc.ErrorCode) { return nil, 0 }

var _ = pbrpc.ServiceHandler(ServerServiceHandlerBase{})

// `ServerServiceHandler` template:
//
// type ServerServiceHandler struct {
//     ServerServiceHandlerBase
// }
//
// func (ServerServiceHandler) X_InterceptMethodCall(methodIndex int32, context_ context.Context, channel pbrpc.Channel, request pbrpc.IncomingMessage) (pbrpc.OutgoingMessage, pbrpc.ErrorCode)
// func (ServerServiceHandler) SayHello(context_ context.Context, channel pbrpc.Channel, request *SayHelloRequest) (*SayHelloResponse, error)

const serverServiceName = "SERVER"

var methodTableOfServerService = pbrpc.MethodTable{
    /* ServerService.SayHello */ {
        reflect.TypeOf(SayHelloRequest{}),
        reflect.TypeOf(SayHelloResponse{}),

        func(serviceHandler pbrpc.ServiceHandler, context_ context.Context, channel pbrpc.Channel, request pbrpc.IncomingMessage) (pbrpc.OutgoingMessage, pbrpc.ErrorCode) {
            {
                response, errorCode := serviceHandler.X_InterceptMethodCall(ServerService_SayHello, context_, channel, request)

                if errorCode != 0 {
                    return nil, errorCode
                }

                if response != nil {
                    return response, 0
                }
            }

            methodHandler, ok := serviceHandler.(interface { SayHello(context.Context, pbrpc.Channel, *SayHelloRequest) (*SayHelloResponse, error) })

            if !ok {
                return nil, pbrpc.ErrorNotImplemented
            }

            response, e := methodHandler.SayHello(context_, channel, request.(*SayHelloRequest))

            if e != nil {
                if e, ok := e.(pbrpc.Error); ok && e.IsInitiative() {
                    return nil, e.GetCode()
                } else {
                    return nil, pbrpc.ErrorInternalServer
                }
            }

            return response, 0
        },
    },
}
